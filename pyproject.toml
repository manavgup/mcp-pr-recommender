[tool.poetry]
name = "mcp-pr-recommender"
version = "0.1.0"
description = "Intelligent PR boundary recommendation system using FastMCP"
authors = ["Manav Gupta <manavg@gmail.com>"]
readme = "README.md"
packages = [{include = "pr_recommender", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10,<4.0"
fastmcp = "^2.6.1"
pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"
openai = "^1.0.0"  # For LLM calls
httpx = "^0.28.1"  # For API calls
tiktoken = "^0.5.0"  # For token counting
typing-extensions = "^4.0.0"
# Additional dependencies for better functionality
aiofiles = "^23.0.0"  # For async file operations
python-dotenv = "^1.0.0"  # For .env file support
rich = "^13.0.0"  # For better console output and logging
tenacity = "^8.0.0"  # For retry logic with LLM calls

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
black = "^23.0.0"
isort = "^5.12.0"
ruff = "^0.1.0"
mypy = "^1.0.0"
# Additional dev dependencies
pre-commit = "^3.0.0"  # For git hooks

[tool.poetry.scripts]
mcp-pr-recommender = "pr_recommender.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["pr_recommender"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "llm: marks tests that require LLM API calls",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]